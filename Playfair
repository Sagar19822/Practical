
#include <bits/stdc++.h>
using namespace std;

// Function to convert the string to lowercase
void toLowerCase(char plain[], int ps) {
    for (int i = 0; i < ps; i++) {
        if (plain[i] >= 'A' && plain[i] <= 'Z')
            plain[i] += 32;
    }
}

// Function to remove all spaces in a string
int removeSpaces(char* plain, int ps) {
    int count = 0;
    for (int i = 0; i < ps; i++)
        if (plain[i] != ' ')
            plain[count++] = plain[i];
    plain[count] = '\0';
    return count;
}

// Function to generate the 5x5 key square
void generateKeyTable(char key[], int ks, char keyT[5][5]) {
    int i, j, k;
    int dicty[26] = {0};

    for (i = 0; i < ks; i++) {
        if (key[i] != 'j')
            dicty[key[i] - 'a'] = 2;
    }

    dicty['j' - 'a'] = 1; 

    i = 0, j = 0;
    for (k = 0; k < ks; k++) {
        if (dicty[key[k] - 'a'] == 2) {
            dicty[key[k] - 'a'] -= 1;
            keyT[i][j++] = key[k];
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }

    for (k = 0; k < 26; k++) {
        if (dicty[k] == 0) {
            keyT[i][j++] = (char)(k + 'a');
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }
}

// Function to search characters in the key square
void search(char keyT[5][5], char a, char b, int arr[]) {
    if (a == 'j') a = 'i';
    if (b == 'j') b = 'i';

    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (keyT[i][j] == a) {
                arr[0] = i;
                arr[1] = j;
            }
            if (keyT[i][j] == b) {
                arr[2] = i;
                arr[3] = j;
            }
        }
    }
}

// Function to find mod 5
int mod5(int a) { 
    return (a % 5); 
}

// Function to make text length even
int prepare(char str[], int ptrs) {
    if (ptrs % 2 != 0) {
        str[ptrs++] = 'z';
        str[ptrs] = '\0';
    }
    return ptrs;
}

// Encryption function
// [m o n a r]
// [c h y b d]
// [e f g i k]
// [l p q s t]
// [u v w x z]
void encrypt(char str[], char keyT[5][5], int ps) {
    int a[4];

    for (int i = 0; i < ps; i += 2) 
    // a[0]=2,a[1]=3,a[2]=0,a[3]=2 for in
    // a[0]=3,a[1]=3,a[2]=3,a[3]=4 for st
    {
        search(keyT, str[i], str[i + 1], a);

        if (a[0] == a[2]) 
        {
            str[i] = keyT[a[0]][mod5(a[1] + 1)];
            str[i + 1] = keyT[a[0]][mod5(a[3] + 1)];
        } 

        else if (a[1] == a[3]) 
        {
            str[i] = keyT[mod5(a[0] + 1)][a[1]];
            str[i + 1] = keyT[mod5(a[2] + 1)][a[1]];
        } 

        else 
        {
            str[i] = keyT[a[0]][a[3]];
            str[i + 1] = keyT[a[2]][a[1]];
        }
    }
}

// Function to encrypt using Playfair Cipher
void encryptByPlayfairCipher(char str[], char key[]) {
    char keyT[5][5];
    int ks = strlen(key);
    ks = removeSpaces(key, ks);
    toLowerCase(key, ks);

    int ps = strlen(str);
    toLowerCase(str, ps);
    ps = removeSpaces(str, ps);
    ps = prepare(str, ps);

    generateKeyTable(key, ks, keyT);
    encrypt(str, keyT, ps);
}

// Decryption function
void decrypt(char str[], char keyT[5][5], int ps) {
    int a[4];

    for (int i = 0; i < ps; i += 2) 
    // [m o n a r]
    // [c h y b d]
    // [e f g i k]
    // [l p q s t]
    // [u v w x z]
    // a[0]=2,a[1]=2,a[2]=0,a[3]=3
    {
        search(keyT, str[i], str[i + 1], a);

        if (a[0] == a[2]) {
            str[i] = keyT[a[0]][mod5(a[1] - 1 + 5)];
            str[i + 1] = keyT[a[0]][mod5(a[3] - 1 + 5)];
        } else if (a[1] == a[3]) {
            str[i] = keyT[mod5(a[0] - 1 + 5)][a[1]];
            str[i + 1] = keyT[mod5(a[2] - 1 + 5)][a[1]];
        } else {
            str[i] = keyT[a[0]][a[3]];
            str[i + 1] = keyT[a[2]][a[1]];
        }
    }
}

// Function to decrypt using Playfair Cipher
void decryptByPlayfairCipher(char str[], char key[]) {
    char keyT[5][5];
    int ks = strlen(key);
    ks = removeSpaces(key, ks);
    toLowerCase(key, ks);

    int ps = strlen(str);
    generateKeyTable(key, ks, keyT);
    decrypt(str, keyT, ps);
}

// Driver code
int main() {
    char str[30] = "instruments";
    char key[30] = "Monarchy";

    cout << "Key text: " << key << "\n";
    cout << "Plain text: " << str << "\n";

    // Encrypting
    encryptByPlayfairCipher(str, key);
    cout << "Cipher text: " << str << "\n";

    // Decrypting
    decryptByPlayfairCipher(str, key);
    cout << "Decrypted text: " << str << "\n";

    return 0;
}

